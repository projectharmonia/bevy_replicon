[package]
name = "bevy_replicon"
version = "0.33.0-rc.5"
authors = [
  "Hennadii Chernyshchyk <genaloner@gmail.com>",
  "koe <ukoe@protonmail.com>",
]
edition = "2024"
description = "A server-authoritative replication crate for Bevy"
readme = "README.md"
repository = "https://github.com/projectharmonia/bevy_replicon"
keywords = [
  "bevy",
  "multiplayer",
  "netcode",
  "replication",
  "server-authoritative",
]
categories = ["game-development", "network-programming"]
license = "MIT OR Apache-2.0"
include = ["/src", "/LICENSE*"]

[package.metadata.docs.rs]
rustdoc-args = ["-Zunstable-options", "--cfg", "docsrs"]
all-features = true

[workspace]
members = ["bevy_replicon_example_backend"]

[dependencies]
bevy = { version = "0.16.0-rc.5", default-features = false }
log = "0.4" # Directly depend on `log` like other `no_std` Bevy crates, since `bevy_log` currently requires `std`.
petgraph = { version = "0.8", default-features = false, features = [
  "stable_graph",
] }
variadics_please = "1.0"
typeid = "1.0"
bytes = { version = "1.10", default-features = false }
serde = { version = "1.0", default-features = false }
bitflags = { version = "2.6", features = ["serde"] }
postcard = { version = "1.1", default-features = false, features = [
  "experimental-derive",
] }

[target.'cfg(not(all(target_has_atomic = "8", target_has_atomic = "16", target_has_atomic = "32", target_has_atomic = "64", target_has_atomic = "ptr")))'.dependencies]
bytes = { version = "1.10", default-features = false, features = [
  "extra-platforms",
] }

[dev-dependencies]
bevy = { version = "0.16.0-rc.5", default-features = false, features = [
  "bevy_log",
  "bevy_sprite",
  "serialize",
] }
criterion = { version = "0.5", default-features = false, features = [
  "cargo_bench_support",
] }

[features]
default = ["scene", "client", "server"]

# Client-related logic.
client = []

# Server-related logic.
server = []

# Integration with Bevy diagnostics for client.
client_diagnostics = ["client"]

# Replication into a scene.
scene = ["bevy/bevy_scene"]

[[bench]]
name = "replication"
harness = false

[[test]]
name = "mutations"
required-features = ["client", "server"]

[[test]]
name = "client_event"
required-features = ["client", "server"]

[[test]]
name = "client_trigger"
required-features = ["client", "server"]

[[test]]
name = "connection"
required-features = ["client", "server"]

[[test]]
name = "despawn"
required-features = ["client", "server"]

[[test]]
name = "fns"
required-features = ["client"]

[[test]]
name = "insertion"
required-features = ["client", "server"]

[[test]]
name = "removal"
required-features = ["client", "server"]

[[test]]
name = "scene"
required-features = ["scene"]

[[test]]
name = "server_event"
required-features = ["client", "server"]

[[test]]
name = "server_trigger"
required-features = ["client", "server"]

[[test]]
name = "spawn"
required-features = ["client", "server"]

[[test]]
name = "stats"
required-features = ["client_diagnostics", "client", "server"]

[[test]]
name = "visibility"
required-features = ["client", "server"]

[lints.clippy]
type_complexity = "allow"
too_many_arguments = "allow"
alloc_instead_of_core = "warn"
std_instead_of_alloc = "warn"
std_instead_of_core = "warn"
